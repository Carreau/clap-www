<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clap</title>
    <link>https://clap.rs/</link>
    <description>Recent content on clap</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 11 Sep 2016 14:08:29 +0200</lastBuildDate>
    
	<atom:link href="https://clap.rs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fast</title>
      <link>https://clap.rs/post/01_fast/</link>
      <pubDate>Sun, 11 Sep 2016 14:08:29 +0200</pubDate>
      
      <guid>https://clap.rs/post/01_fast/</guid>
      <description>clap aims to be extremely fast and efficient. Arguments will be parsed without wasting CPU cycles or hogging memory.
Because let&amp;rsquo;s face it, your application is the star of the show!</description>
    </item>
    
    <item>
      <title>Configurable</title>
      <link>https://clap.rs/post/02_configurable/</link>
      <pubDate>Sun, 11 Sep 2016 14:08:29 +0200</pubDate>
      
      <guid>https://clap.rs/post/02_configurable/</guid>
      <description>clap is fully configurable, yet still has common defaults for those applications that simply want be up and running in no time.
Utilizing clap gives you ability to have a truly custom experience, an extremely simple solution, and anything in between.</description>
    </item>
    
    <item>
      <title>Easy to Use</title>
      <link>https://clap.rs/post/03_easy/</link>
      <pubDate>Sun, 11 Sep 2016 14:08:29 +0200</pubDate>
      
      <guid>https://clap.rs/post/03_easy/</guid>
      <description>clap is extremely easy and intuitive to use.
In fact, it&amp;rsquo;s so intuitive that all you may need is a completer engine (such as racer), it&amp;rsquo;s really that simple! However, after a quick glance at our API documentation you&amp;rsquo;ll be up and running, even using advanced features in no time!
Here&amp;rsquo;s a quick example of an application that provides a single option (--config &amp;lt;file&amp;gt;) which requires a value, and must be used at runtime.</description>
    </item>
    
    <item>
      <title>Standard Argument Types</title>
      <link>https://clap.rs/post/04_argtypes/</link>
      <pubDate>Sun, 11 Sep 2016 14:08:29 +0200</pubDate>
      
      <guid>https://clap.rs/post/04_argtypes/</guid>
      <description>clap supports all standard argument types, flags/switches, options, free/positional arguments, and even subcommands! Here&amp;rsquo;s some extra information about special features clap supports
 Both short and long versions supported (-f and --flag respectively) Combining short versions (-fBgoZ same as -f -B -g -o -Z) Multiple occurrences (-vvv same as -v -v -v) Multiple values ($ myprog &amp;lt;file&amp;gt;...) Value parameters (i.e. minimum, maximum, or the exact number of values) Default and specific value sets All standard short and long versions of options (-o value, -ovalue, -o=value and --option value or --option=value respectively) Argument relationships, such as requires, conflicts with, overrides, etc.</description>
    </item>
    
    <item>
      <title>Auto-Generated Help</title>
      <link>https://clap.rs/post/05_autohelp/</link>
      <pubDate>Sun, 11 Sep 2016 14:08:45 +0200</pubDate>
      
      <guid>https://clap.rs/post/05_autohelp/</guid>
      <description>clap generates your help message and usage strings for you automatically from the list of valid arguments you provide, this includes the common --help and --version switches. This means no more out of sync help messages!
Full help message templating is also supported for the best of both worlds, where you want to stay up to date and provide a custom message.</description>
    </item>
    
    <item>
      <title>Supports YAML</title>
      <link>https://clap.rs/post/06_yaml/</link>
      <pubDate>Sun, 11 Sep 2016 14:53:21 +0200</pubDate>
      
      <guid>https://clap.rs/post/06_yaml/</guid>
      <description>You can define your list of valid arguments in a YAML file, keeping your main.rs clean and tidy.</description>
    </item>
    
    <item>
      <title>Auto-Generates Completions</title>
      <link>https://clap.rs/post/07_completions/</link>
      <pubDate>Sun, 11 Sep 2016 14:53:21 +0200</pubDate>
      
      <guid>https://clap.rs/post/07_completions/</guid>
      <description>clap can generate bash, fish, zsh and even PowerShell completion files at compile time! These can then be installed alongside your application giving full shell tab-completions of all flags, options, subcommands and even specific argument values!</description>
    </item>
    
    <item>
      <title>Friendly Errors</title>
      <link>https://clap.rs/post/08_errors/</link>
      <pubDate>Sun, 11 Sep 2016 14:53:21 +0200</pubDate>
      
      <guid>https://clap.rs/post/08_errors/</guid>
      <description>clap generates friendly, and informative error messages. These messages kindly inform the end user of ways in which to correct the error. clap will even give a context sensitive usage string suggestion to the user!</description>
    </item>
    
    <item>
      <title>Suggestions</title>
      <link>https://clap.rs/post/09_suggestions/</link>
      <pubDate>Sun, 11 Sep 2016 14:53:21 +0200</pubDate>
      
      <guid>https://clap.rs/post/09_suggestions/</guid>
      <description>If the end user has a typo, clap will gently suggest a correction based on the current context.
If the user enters --confg, but --config is most likely what they meant to type, clap will inform them and suggest the correct argument. This extends to subcommands and even specific argument values!</description>
    </item>
    
    <item>
      <title>Argument Relationships</title>
      <link>https://clap.rs/post/10_rules/</link>
      <pubDate>Sun, 11 Sep 2016 14:53:21 +0200</pubDate>
      
      <guid>https://clap.rs/post/10_rules/</guid>
      <description>One can define argument relationships easily, and intuitively. This includes everything from requirements, conflicts, and overrides. For instance, if one argument requires another to be used, this can be specified. If another argument cannot be used any particular other, that can be defined as well.
These relationships can span from simply conflicts and requirements, to POSIX compatible overrides, to multiple grouped and nested layers of complexity. Each of these settings can even be applied conditionally!</description>
    </item>
    
    <item>
      <title>Argument Groups</title>
      <link>https://clap.rs/post/11_groups/</link>
      <pubDate>Sun, 11 Sep 2016 14:53:21 +0200</pubDate>
      
      <guid>https://clap.rs/post/11_groups/</guid>
      <description>clap supports grouping arguments into logical groups, this can vastly assist with things such as complex relationships</description>
    </item>
    
    <item>
      <title>Much, Much More!</title>
      <link>https://clap.rs/post/12_more/</link>
      <pubDate>Sun, 11 Sep 2016 14:53:21 +0200</pubDate>
      
      <guid>https://clap.rs/post/12_more/</guid>
      <description>clap supports much, much more than these short few bullet points. Delve into the many resources, or contact us to find out more!</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://clap.rs/about/about/</link>
      <pubDate>Sat, 18 Jul 2015 14:08:35 +0200</pubDate>
      
      <guid>https://clap.rs/about/about/</guid>
      <description>clap or Command Line Argument Parser
Is a simple-to-use, efficient, and fully-configurable library for parsing command line arguments.
clap supports advanced features like argument relationships, subcommands, and much, much more.</description>
    </item>
    
  </channel>
</rss>